# syntax=docker/dockerfile:1
# This Dockerfile extends the base Dockerfile with Technologymatch customizations

# Include all args from the original Dockerfile
ARG USE_CUDA=false
ARG USE_OLLAMA=false
ARG USE_CUDA_VER=cu128
ARG USE_EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
ARG USE_RERANKING_MODEL=""
ARG USE_TIKTOKEN_ENCODING_NAME="cl100k_base"
ARG BUILD_HASH=dev-build
ARG UID=0
ARG GID=0

######## WebUI frontend ########
FROM --platform=$BUILDPLATFORM node:22-alpine3.20 AS build
ARG BUILD_HASH

WORKDIR /app

COPY package.json package-lock.json ./
RUN npm ci

COPY . .

# Copy custom branding assets before build
COPY technologymatch/static/favicon.png /app/static/static/favicon.png
COPY technologymatch/static/favicon-dark.png /app/static/static/favicon-dark.png
COPY technologymatch/static/favicon.svg /app/static/static/favicon.svg
COPY technologymatch/static/favicon.ico /app/static/static/favicon.ico
COPY technologymatch/static/favicon-96x96.png /app/static/static/favicon-96x96.png
COPY technologymatch/static/apple-touch-icon.png /app/static/static/apple-touch-icon.png
COPY technologymatch/static/web-app-manifest-192x192.png /app/static/static/web-app-manifest-192x192.png
COPY technologymatch/static/web-app-manifest-512x512.png /app/static/static/web-app-manifest-512x512.png
COPY technologymatch/static/splash.png /app/static/static/splash.png
COPY technologymatch/static/splash-dark.png /app/static/static/splash-dark.png
COPY technologymatch/static/logo.png /app/static/static/logo.png

# Update app.html with our branding
RUN sed -i 's/<title>Open WebUI<\/title>/<title>Technologymatch AI<\/title>/g' /app/src/app.html
RUN sed -i 's/content="Open WebUI"/content="Technologymatch AI"/g' /app/src/app.html
RUN sed -i 's/title="Open WebUI"/title="Technologymatch AI"/g' /app/src/app.html

ENV APP_BUILD_HASH=${BUILD_HASH}
RUN npm run build

######## WebUI backend ########
FROM python:3.11-slim-bookworm AS base

# Use args
ARG USE_CUDA
ARG USE_OLLAMA
ARG USE_CUDA_VER
ARG USE_EMBEDDING_MODEL
ARG USE_RERANKING_MODEL
ARG UID
ARG GID

## Basis ##
ENV ENV=prod \
    PORT=8080 \
    # pass build args to the build
    USE_OLLAMA_DOCKER=${USE_OLLAMA} \
    USE_CUDA_DOCKER=${USE_CUDA} \
    USE_CUDA_DOCKER_VER=${USE_CUDA_VER} \
    USE_EMBEDDING_MODEL_DOCKER=${USE_EMBEDDING_MODEL} \
    USE_RERANKING_MODEL_DOCKER=${USE_RERANKING_MODEL}

## Basis URL Config ##
ENV OLLAMA_BASE_URL="/ollama" \
    OPENAI_API_BASE_URL=""

## API Key and Security Config ##
ENV OPENAI_API_KEY="" \
    WEBUI_SECRET_KEY="" \
    SCARF_NO_ANALYTICS=true \
    DO_NOT_TRACK=true \
    ANONYMIZED_TELEMETRY=false

#### Other models #########################################################
## whisper TTS model settings ##
ENV WHISPER_MODEL="base" \
    WHISPER_MODEL_DIR="/app/backend/data/cache/whisper/models"

## RAG Embedding model settings ##
ENV RAG_EMBEDDING_MODEL="$USE_EMBEDDING_MODEL_DOCKER" \
    RAG_RERANKING_MODEL="$USE_RERANKING_MODEL_DOCKER" \
    SENTENCE_TRANSFORMERS_HOME="/app/backend/data/cache/embedding/models"

## Tiktoken model settings ##
ENV TIKTOKEN_ENCODING_NAME="cl100k_base" \
    TIKTOKEN_CACHE_DIR="/app/backend/data/cache/tiktoken"

## Hugging Face download cache ##
ENV HF_HOME="/app/backend/data/cache/embedding/models"

## Torch Extensions ##
# ENV TORCH_EXTENSIONS_DIR="/.cache/torch_extensions"

#### Other models ##########################################################

WORKDIR /app/backend

ENV HOME=/root
# Create user and group if not root
RUN if [ $UID -ne 0 ]; then \
    if [ $GID -ne 0 ]; then \
    addgroup --gid $GID app; \
    fi; \
    adduser --uid $UID --gid $GID --home $HOME --disabled-password --no-create-home app; \
    fi

RUN mkdir -p $HOME/.cache/chroma
RUN echo -n 00000000-0000-0000-0000-000000000000 > $HOME/.cache/chroma/telemetry_user_id

# Make sure the user has access to the app and root directory
RUN chown -R $UID:$GID /app $HOME

RUN if [ "$USE_OLLAMA" = "true" ]; then \
    apt-get update && \
    # Install pandoc and netcat
    apt-get install -y --no-install-recommends git build-essential pandoc netcat-openbsd curl && \
    apt-get install -y --no-install-recommends gcc python3-dev && \
    # for RAG OCR
    apt-get install -y --no-install-recommends ffmpeg libsm6 libxext6 && \
    # install helper tools
    apt-get install -y --no-install-recommends curl jq && \
    # install ollama
    curl -fsSL https://ollama.com/install.sh | sh && \
    # cleanup
    rm -rf /var/lib/apt/lists/*; \
    else \
    apt-get update && \
    # Install pandoc, netcat and gcc
    apt-get install -y --no-install-recommends git build-essential pandoc gcc netcat-openbsd curl jq && \
    apt-get install -y --no-install-recommends gcc python3-dev && \
    # for RAG OCR
    apt-get install -y --no-install-recommends ffmpeg libsm6 libxext6 && \
    # cleanup
    rm -rf /var/lib/apt/lists/*; \
    fi

# install python dependencies
COPY --chown=$UID:$GID ./backend/requirements.txt ./requirements.txt

RUN pip3 install --no-cache-dir uv && \
    if [ "$USE_CUDA" = "true" ]; then \
    # If you use CUDA the whisper and embedding model will be downloaded on first use
    pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/$USE_CUDA_DOCKER_VER --no-cache-dir && \
    uv pip install --system -r requirements.txt --no-cache-dir && \
    python -c "import os; from sentence_transformers import SentenceTransformer; SentenceTransformer(os.environ['RAG_EMBEDDING_MODEL'], device='cpu')" && \
    python -c "import os; from faster_whisper import WhisperModel; WhisperModel(os.environ['WHISPER_MODEL'], device='cpu', compute_type='int8', download_root=os.environ['WHISPER_MODEL_DIR'])"; \
    python -c "import os; import tiktoken; tiktoken.get_encoding(os.environ['TIKTOKEN_ENCODING_NAME'])"; \
    else \
    pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu --no-cache-dir && \
    uv pip install --system -r requirements.txt --no-cache-dir && \
    python -c "import os; from sentence_transformers import SentenceTransformer; SentenceTransformer(os.environ['RAG_EMBEDDING_MODEL'], device='cpu')" && \
    python -c "import os; from faster_whisper import WhisperModel; WhisperModel(os.environ['WHISPER_MODEL'], device='cpu', compute_type='int8', download_root=os.environ['WHISPER_MODEL_DIR'])"; \
    python -c "import os; import tiktoken; tiktoken.get_encoding(os.environ['TIKTOKEN_ENCODING_NAME'])"; \
    fi; \
    chown -R $UID:$GID /app/backend/data/

# copy built frontend files
COPY --chown=$UID:$GID --from=build /app/build /app/build
COPY --chown=$UID:$GID --from=build /app/CHANGELOG.md /app/CHANGELOG.md
COPY --chown=$UID:$GID --from=build /app/package.json /app/package.json

# copy backend files
COPY --chown=$UID:$GID ./backend .

# Copy custom branding assets to backend
COPY --chown=$UID:$GID technologymatch/static/favicon.png open_webui/static/favicon.png
COPY --chown=$UID:$GID technologymatch/static/favicon-dark.png open_webui/static/favicon-dark.png
COPY --chown=$UID:$GID technologymatch/static/favicon.svg open_webui/static/favicon.svg
COPY --chown=$UID:$GID technologymatch/static/favicon.ico open_webui/static/favicon.ico
COPY --chown=$UID:$GID technologymatch/static/favicon-96x96.png open_webui/static/favicon-96x96.png
COPY --chown=$UID:$GID technologymatch/static/apple-touch-icon.png open_webui/static/apple-touch-icon.png
COPY --chown=$UID:$GID technologymatch/static/web-app-manifest-192x192.png open_webui/static/web-app-manifest-192x192.png
COPY --chown=$UID:$GID technologymatch/static/web-app-manifest-512x512.png open_webui/static/web-app-manifest-512x512.png
COPY --chown=$UID:$GID technologymatch/static/splash.png open_webui/static/splash.png
COPY --chown=$UID:$GID technologymatch/static/splash-dark.png open_webui/static/splash-dark.png
COPY --chown=$UID:$GID technologymatch/static/logo.png open_webui/static/logo.png

# Update site.webmanifest with our branding
RUN sed -i 's/"name": "Open WebUI"/"name": "Technologymatch AI"/g' open_webui/static/site.webmanifest

# Patch the env.py file to remove the suffix and fix indentation
COPY --chown=$UID:$GID technologymatch/static/favicon.png open_webui/static/favicon.png
RUN sed -i "s/if WEBUI_NAME != \"Open WebUI\":/if WEBUI_NAME != \"Open WebUI\": # Modified/g" open_webui/env.py && \
    sed -i "s/    WEBUI_NAME += \" (Open WebUI)\"/    pass # Removed suffix/g" open_webui/env.py && \
    sed -i "s|WEBUI_FAVICON_URL = \"https://openwebui.com/favicon.png\"|WEBUI_FAVICON_URL = \"\"|g" open_webui/env.py

EXPOSE 8080

HEALTHCHECK CMD curl --silent --fail http://localhost:${PORT:-8080}/health | jq -ne 'input.status == true' || exit 1

USER $UID:$GID

ARG BUILD_HASH
ENV WEBUI_BUILD_VERSION=${BUILD_HASH}
ENV DOCKER=true
ENV WEBUI_NAME="Technologymatch AI"

CMD [ "bash", "start.sh"]